#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2015, Joyent, Inc.
#

#
# Check if the SDC repos (those listed in targets.json) are prepared (branched
# as appropriate) for an SDC release build. Will also apply
# missing branch with the '-a' flag.
#
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

#---- globals, config

TOP=$(cd $(dirname $0)/../; pwd)
WORKDIR="$TOP/tmp/check-repos-for-release"


#---- functions

function usage() {
    if [[ -n "$1" ]]; then
        echo "error: $1"
        echo ""
    fi
    echo "Usage:"
    echo "  check-repos-for-release [<options>] [release-]YYYYMMDD"
    echo ""
    echo "Options:"
    echo "  -c CREDS        Provide creds for mo.joyent.com. If not given"
    echo "                  will use 'MOLYBDENUM_CREDENTIALS' envvar."
    echo "  -a              Create branch (*A*pply) if it is missing"
    echo "  -t TARGET       Just run for the given MG target. If not given"
    echo "                  then all targets in 'targets.json' are used. Can be"
    echo "                  specified multiple times."
    echo ""
    echo "Examples:"
    echo "  check-repos-for-release 20111020"
    echo "  check-repos-for-release -t usbheadnode 20111020"
    echo "  check-repos-for-release -a release-20111020"
    exit 1
}

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

function get_repo_url_from_targ {
  local targ=$1
  local urls=$(cat ${TOP}/targets.json | ${TOP}/tools/json $targ | grep -v undefined | ${TOP}/tools/json repos | ${TOP}/tools/json -a url )
  local ret=""
  for url in $urls; do
   ret="$ret $(echo $url)" # | cut -d ':' -f2 | xargs -I {} basename {} .git)"
  done
  echo $ret
}

function get_repo_name_from_url {
  targ=$1
  echo $targ | cut -d ':' -f2 | xargs -I {} basename {} .git
}

function apply_missing_to_repo {
    local repo_url=$1
    local branch=$2

    echo "Branch repo $repo_url for release: branch '$branch'"
    mkdir -p $WORKDIR
    repo_name=$(get_repo_name_from_url $repo_url)
    cd $WORKDIR;
    if [[ -d "$repo_name" ]]; then
        (cd $repo_name && git checkout master && git pull --rebase origin master)
    else
        git clone $repo_url $repo_name;
    fi
    cd $repo_name
    git checkout master
    if [[ ! -z "$branch" ]]; then
      # Consider '-B' to force reset of branch if already exists.
      git checkout -b $branch
      git push -q origin $branch
    fi
    git checkout master   # go back to master branch for subsequent runs
}

function check_repo_url {
    local repo_url=$1
    local targ=$2   # optional

    repo_name=$(get_repo_name_from_url $repo_url)
    local hit
    if [[ -d "$WORKDIR/$repo_name" ]]; then
        hit=$(cd $WORKDIR/$repo_name && git branch | (grep $BRANCH || true))
    fi
    if [[ -z "$hit" ]]; then
        hit=$(curl -sS https://mo.joyent.com/api/repos/$repo_name/refs -u $CREDS \
            | $TOP/tools/json branches \
            | grep "\"$BRANCH\"" \
            || true)
    fi
    if [[ -z "$hit" ]]; then
      if [[ $APPLY -eq 1 ]]; then
        echo "Repo $repo_url ('$targ' target): missing '$BRANCH' branch"
        apply_missing_to_repo $repo_url "$BRANCH"
      else
        echo "Repo $repo_url ('$targ' target): FAIL (no '$BRANCH' branch, use -a to apply)"
      fi
    else
      echo "Repo $repo_url ('$targ' target): OK"
    fi
}

function check_targ {
    local targ=$1
    local repo_urls="$(get_repo_url_from_targ $targ)"
    for repo_url in $repo_urls; do
        check_repo_url $repo_url $targ
    done
}


#---- mainline

APPLY=0   # whether to apply a branch to repo
CREDS=
TARGETS=
while getopts "hac:t:" c; do
    case "$c" in
    h)
        usage
        ;;
    a)
        APPLY=1
        ;;
    c)
        CREDS=$OPTARG
        ;;
    t)
        TARGETS="$TARGETS $OPTARG"
        ;;
    *)
        usage "illegal option -- $OPTARG"
        ;;
    esac
done
shift $((OPTIND - 1))

RELEASE=$1
if [[ -z "$RELEASE" ]]; then
    usage "no RELEASE given"
fi
if [[ -n "$(echo "$RELEASE" | grep '^[0-9]\{8\}$' || true)" ]]; then
    # YYYYMMDD
    BRANCH=release-$RELEASE
elif [[ -n "$(echo "$RELEASE" | grep '^release-[0-9]\{8\}$' || true)" ]]; then
    BRANCH=$RELEASE
else
    fatal "'$RELEASE' does not match '[release-]YYYYMMDD'"
fi

if [[ -z "$CREDS" ]]; then
    CREDS=$MOLYBDENUM_CREDENTIALS
fi
if [[ -z "$CREDS" ]]; then
    usage "no mo.joyent.com crendentials: use '-c CREDS' or set MOLYBDENUM_CREDENTIALS"
fi

(cd $TOP && JOYENT_BUILD=true bash <targets.json.in >targets.json)
if [[ -z "$TARGETS" ]]; then
    TARGETS=$(node -e "var fs = require('fs');
        var targets = JSON.parse(fs.readFileSync('$TOP/targets.json'));
        Object.keys(targets).forEach( function(targ) { console.log(targ) });" \
        | grep -v sdcsso \
        | xargs)
fi

# Get some "low on the food chain" repos first (RELENG-552).
check_repo_url git@github.com:joyent/mountain-gorilla.git '(none)'
check_repo_url git@github.com:joyent/registrar.git '(none)'
check_repo_url git@github.com:joyent/sdc-config-agent.git '(none)'
check_repo_url git@github.com:joyent/sdc-amon.git '(none)'

for targ in $TARGETS; do
  if [[ $targ == 'all' ]]; then
    continue
  fi
  check_targ $targ
done
