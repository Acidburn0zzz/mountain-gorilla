#!/bin/bash
#
# Check if the SDC repos (those listed in repos.json) are prepared (branched
# or tagged as appropriate) for an SDC release build. Will also apply
# missing branch/tag with the '-a' flag.
#

#set -x
set -o errexit


#---- globals, config

TOP=$(cd $(dirname $0)/../; pwd)
WORKDIR="/var/tmp/check-repos-for-release.$$"


#---- functions

function cleanup() {
    rm -rf $WORKDIR
}

function usage() {
    if [[ -n "$1" ]]; then
        echo "error: $1"
        echo ""
    fi
    echo "Usage:"
    echo "  check-repos-for-release [OPTIONS] RELEASE-DATE"
    echo ""
    echo "Options:"
    echo "  -c CREDS        Provide creds for mo.joyent.com. If not given"
    echo "                  will use 'MOLYBDENUM_CREDENTIALS' envvar."
    echo "  -a              *Apply* missing branch and/or tag (as appropriate)"
    echo "                  The 'illumos-extra' repo is just tagged, all"
    echo "                  others are just branched."
    echo "  -r REPO         Just run for the given repository. If not given"
    echo "                  then all repos in 'repos.json' are used. Can be"
    echo "                  specified multiple times."
    echo ""
    echo "Examples:"
    echo "  check-repos-for-release 20111020"
    echo "  check-repos-for-release -r usb-headnode 20111020"
    echo "  check-repos-for-release -a 20111020"
    exit 1
}

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

#TODO: This is HACK, the repo URL should be in repos.json.
function repo_url_from_name () {
    local name=$1
    if [[ "$name" == "illumos-extra" ]]; then
        echo "git://github.com/joyent/$name.git"
    else
        echo "git@git.joyent.com:$name.git"
    fi
}

function apply_missing {
    local repo_name=$1
    local tag=$2
    local branch=$3
    local repo_url=$(repo_url_from_name $repo_name)
    echo "Prep $repo ($repo_url) for release: branch '$branch', tag '$tag'."
    mkdir -p $WORKDIR
    cd $WORKDIR;
    git clone $repo_url $repo_name;
    cd $repo_name;
    git checkout master;
    if [[ ! -z "$tag" ]]; then
        # Consider '-B' to force reset of branch if already exists.
        git tag -a "$tag" -m "$tag release"
        git push -q --tags
    fi
    if [[ ! -z "$branch" ]]; then
        # Consider '-B' to force reset of branch if already exists.
        git checkout -b $branch
        git push -q origin $branch
    fi
}




#---- mainline

trap cleanup EXIT

APPLY=0   # whether to apply a branch/tag to repo
CREDS=
REPOS=
while getopts "hac:r:" c; do
    case "$c" in
    h)
        usage
        ;;
    a)
        APPLY=1
        ;;
    c)
        CREDS=$OPTARG
        ;;
    r)
        REPOS="$REPOS $OPTARG"
        ;;
    *)
        usage "illegal option -- $OPTARG"
        ;;
    esac
done
shift $((OPTIND - 1))


RELEASE=$1
if [[ -z "$RELEASE" ]]; then
    usage "no RELEASE given"
fi
is_date=$(echo $RELEASE | grep '^[0-9]\{8\}$' || true)
if [[ -z "$is_date" ]]; then
    usage "given RELEASE, '$RELEASE', is not an 8-digit date"
fi
BRANCH=release-$RELEASE
TAG=$RELEASE

if [[ -z "$CREDS" ]]; then
    CREDS=$MOLYBDENUM_CREDENTIALS
fi
if [[ -z "$CREDS" ]]; then
    usage "no mo.joyent.com crendentials: use '-c CREDS' or set MOLYBDENUM_CREDENTIALS"
fi


if [[ -z "$REPOS" ]]; then
    # Note: The trailing '' is to get `node -e` to shut up about that retval.
    REPOS=$(cd $TOP; node -e "var fs = require('fs'); repos = JSON.parse(fs.readFileSync('repos.json')); console.log(Object.keys(repos).join('\n')); '';");
fi

for repo in $REPOS; do
  if [[ "$repo" == "illumos-extra" ]]; then
    # illumos-extra is special, it is on GitHub and only gets tagged, not
    # branched.
    hit=$(curl -sS https://mo.joyent.com/api/repos/$repo/refs -u $CREDS | $TOP/tools/json tags | grep "\"$TAG\"" || true)
    if [[ -z "$hit" ]]; then
      if [[ $APPLY -eq 1 ]]; then
        echo "$repo: missing '$TAG' tag"
        apply_missing $repo "$TAG" ""
      else
        echo "$repo: FAIL (no '$TAG' tag, use -a to apply)"
      fi
    else
      echo "$repo: OK"
    fi
  else
    hit=$(curl -sS https://mo.joyent.com/api/repos/$repo/refs -u $CREDS | $TOP/tools/json branches | grep "\"$BRANCH\"" || true)
    if [[ -z "$hit" ]]; then
      if [[ $APPLY -eq 1 ]]; then
        echo "$repo: missing '$BRANCH' branch"
        apply_missing $repo "$TAG" "$BRANCH" 
      else
        echo "$repo: FAIL (no '$BRANCH' branch, use -a to apply)"
      fi
    else
      echo "$repo: OK"
    fi
  fi
done
