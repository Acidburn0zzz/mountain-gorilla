#!/bin/bash
#
# This script lives at <mountain-gorilla.git/tools/jenkins-build>. It is
# meant to be used for building SDC components in jenkins jobs. Like this:
#
#        set -o errexit
#        set -o pipefail
#
#        # Poorman's backup of last build run.
#        rm -rf MG.last
#        mkdir -p MG && mv MG MG.last
#        rm -rf MG
#
#        git clone git@git.joyent.com:mountain-gorilla.git MG
#        cp MG/tools/jenkins-build ./
#        ./jenkins-build
#
# E.g. https://jenkins.joyent.us/job/imgapi/configure
#

set -o errexit
unset LD_LIBRARY_PATH   # ensure don't get Java's libs (see OS-703)


# ---- First pass:
# 1. parse params
# 2. change MG branch (if necessary) and restart
if [[ -z "$MG_JENKINS_BUILD_SECOND_PASS" ]]; then
    echo ""
    echo "#---------------------- start first pass"

    # If "payload" is defined, we presume this is from a post-receive hook.
    # `payload.ref` will defined the git branch. For "release-YYYYMMDD" branches
    # (the Joyent engineering convention for release branches) we'll be strict
    # and have:
    #   TRY_BRANCH=  BRANCH=$branch
    # but for other branches we'll be "nice" and use
    #   TRY_BRANCH=$branch  BRANCH=master
    # which allows, for example, a commit to a feature branch (say "foo") to
    # work when ancillary repos (like mountain-gorilla.git and usb-headnode.git)
    # don't have that branch.
    if [[ -n "$payload" ]]; then
        ref=$(echo "$payload" | json ref)
        if [[ $(echo "$ref" | cut -d/ -f2) != "heads" ]]; then
            echo "error: unexpected ref '$ref': is not 'refs/heads'"
            exit 1
        fi
        BRANCH=$(echo "$ref" | cut -d/ -f3)
        if [[ -z "$(echo $BRANCH | egrep '^release-[0-9]+' || true)" ]]; then
            TRY_BRANCH=$BRANCH
            BRANCH=master
        fi
    fi
    if [[ -z "$BRANCH" ]]; then
        BRANCH=master
    fi
    export BRANCH TRY_BRANCH
    echo "BRANCH: $BRANCH"
    echo "TRY_BRANCH: $TRY_BRANCH"

    cd MG
    if [[ -n "$TRY_BRANCH" ]]; then
        mg_has_try_branch=$(git branch | cut -c3- \
            | (grep "^$TRY_BRANCH\$" || true))
        if [[ -n "$mg_has_try_branch" ]]; then
            git checkout $TRY_BRANCH
        else
            git checkout $BRANCH
        fi
    else
        git checkout $BRANCH
    fi

    # Restart jenkins-build now on the correct MG branch.
    export MG_JENKINS_BUILD_SECOND_PASS=1
    exec ./tools/jenkins-build
fi


# ---- Second pass: Do the build.

echo ""
echo "#---------------------- start second pass"

start_time=$(date +%s)
last_time=${start_time}

LOG=build.log
touch $LOG
exec > >(tee ${LOG}) 2>&1


echo ""
echo "#---------------------- env"

date
pwd
whoami
env



echo ""
echo "#---------------------- configure"

[[ -z "$BRANCH" ]] && BRANCH=master
# Note the "-c" to use a cache dir one up, i.e. shared between builds of this job.
CACHE_DIR=$(cd ../; pwd)/cache
if [[ "$CLEAN_CACHE" == "true" ]]; then
    rm -rf $CACHE_DIR
fi

TRACE=1 ./configure -j -t $JOB_NAME -c "$CACHE_DIR" -b "$BRANCH" -B "$TRY_BRANCH"

now_time=$(date +%s)
elapsed=$((${now_time} - ${last_time}))
last_time=${now_time}
echo "TIME: MG configure took ${elapsed} seconds"



echo ""
echo "#---------------------- make"

V=1 gmake $JOB_NAME

now_time=$(date +%s)
elapsed=$((${now_time} - ${last_time}))
last_time=${now_time}
echo "TIME: build took ${elapsed} seconds"



echo ""
echo "#---------------------- upload"

cp $LOG bits/$JOB_NAME/
gmake manta_upload_jenkins
gmake jenkins_publish_image

now_time=$(date +%s)
elapsed=$((${now_time} - ${last_time}))
last_time=${now_time}
echo "TIME: upload took ${elapsed} seconds"
