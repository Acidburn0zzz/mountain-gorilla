#!/bin/bash
# vi: tabstop=4 expandtab shiftwidth=4
#
# Configure the mountain gorilla (aka SDC) build.
#
# "targets.json" is a mapping of Makefile target to info about that target:
# - repos: A list of repos to clone to the "build/" directory for building it.
#   Each repo entry is an object like this:
#       {"url": "git@git.joyent.com:cloud-analytics.git",
#        "submodule-recursive": false,      # optional
#        "dir": "good-ole-ca"}              # optional
# - deps: A list of dependent targets.

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: '
    set -o xtrace
fi
set -o errexit
set -o pipefail



#---- config, globals

BRANCH=master
TRY_BRANCH=

ROOT=$(pwd)
JSON=$ROOT/tools/json



#---- internal support functions

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

function errexit {
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1 at line $2"
}

# Preload bits/ with the latest built and uploaded bits for
# the given target and branch.
# Usage:
#   preload_bits TARGET BRANCH TRY_BRANCH
#
function preload_bits() {
    local target=$1
    local branch=$2
    local try_branch=$3

    echo "# preload bits/$target from stuff.joyent.us/builds/$target/$branch-latest/$target"
    local ssh="ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    mkdir -p bits/$target
    if [[ ! -z "$try_branch" ]]; then
        local out=$($ssh stuff@stuff.joyent.us ls -d builds/$target/$try_branch-latest/$target 2>&1 || true)
        if [[ "${out##*: }" != "No such file or directory" ]]; then
            rsync -e "$ssh" -av \
                stuff@stuff.joyent.us:builds/$target/$try_branch-latest/$target/ \
                bits/$target/
            return
        fi
    fi
    rsync -e "$ssh" -av \
        stuff@stuff.joyent.us:builds/$target/$branch-latest/$target/ \
        bits/$target/
}

# Get the requested repo.
# Usage:
#   get_repo2 REPO-URL BRANCH SUBMODULE-RECURSIVE [NAME] [TRY-BRANCH]
#
# If "SUBMODULE-RECURSIVE" is "true", then "--recursive" is used on
# on the "git submodule update ..." call.
#
# If "NAME" is given, that subdir under "build/" will be used as the
# clone dir. Else it is inferred from the REPO-URL.
#
function get_repo2() {
    local repo_url=$1
    local branch=$2
    local submodule_recursive=$3
    local repo_dir=$4
    local try_branch=$5

    if [[ -z "$repo_dir" ]]; then
        repo_dir=${repo_url##*/}    # strip to last '/'
        repo_dir=${repo_dir##*:}    # strip to last ':'
        repo_dir=${repo_dir%*.git}    # strip '.git' at tail
    fi

    echo "# get '$repo_url' to 'build/$repo_dir'"
    if [[ ! -d build/$repo_dir ]]; then
        mkdir -p build/$repo_dir
        git clone $repo_url build/$repo_dir
        # Note: Use separate `git checkout $branch` instead of `-b $branch`
        # with git clone command because the latter doesn't return non-zero
        # if the branch doesn't exist.
        (cd build/$repo_dir ; git checkout $branch)
    else
        (cd build/$repo_dir ; git checkout $branch ; git pull)
    fi
    if [[ ! -z "$try_branch" ]]; then
        (cd build/$repo_dir ; git checkout $try_branch && git pull || true)
    fi
    if [[ "$submodule_recursive" == "true" ]]; then
        (cd build/$repo_dir; git submodule update --init --recursive)
    else
        (cd build/$repo_dir; git submodule update --init)
    fi
}


function gen_config() {
    mkdir -p bits
    cat <<EOF >bits/config.mk
TIMESTAMP=$(TZ=UTC date "+%Y%m%dT%H%M%SZ")
BRANCH=$BRANCH
TRY_BRANCH=$TRY_BRANCH

SMARTLOGIN_BRANCH=$BRANCH
SMARTLOGIN_SHA=$((cd build/smart-login 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

AMON_BRANCH=$BRANCH
AMON_SHA=$((cd build/amon 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

AGENTS_BRANCH=$BRANCH
AGENTS_SHA=$((cd build/agents 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

CA_BRANCH=$BRANCH
CA_SHA=$((cd build/cloud-analytics 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

UFDS_BRANCH=$BRANCH
UFDS_SHA=$((cd build/ufds 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

AGENTSSHAR_BRANCH=$BRANCH
AGENTSSHAR_SHA=$((cd build/agents-installer 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

PLATFORM_BRANCH=$BRANCH
PLATFORM_SHA=$((cd build/illumos-live 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

EOF

    local repo_name
    for repo_name in `ls -1 build`; do
        upper_repo_name=$(echo $repo_name | tr [:lower:] [:upper:] | tr - _)
        cat <<EOF >>bits/config.mk
${upper_repo_name}_BRANCH=$(CDPATH= cd build/$repo_name && git symbolic-ref HEAD | awk -F/ '{print $3}')
${upper_repo_name}_SHA=$(CDPATH= cd build/$repo_name && git log --pretty=format:'%h' -1)
EOF
    done

    echo "'bits/config.mk' created."
}


function print_help() {
    echo "Configure this SDC build. This involves cloning/pulling the "
    echo "component source repositories."
    echo ""
    echo "Usage:"
    echo "  ./configure [ -b BRANCH ] [ -r REPO [-f] ] [ -t TARGET ]"
    echo ""
    echo "Options:"
    echo "  -h           Print this help and exit."
    echo "  -b BRANCH    Branch to checkout. Defaults to 'master'."
    echo "               Note that this is for *all* core repositories."
    echo "  -B TRY-BRANCH"
    echo "               Branch to try to checkout (if it exists). '-b' value"
    echo "               is used as the default. This is useful for building"
    echo "               a feature branch on one of the many repos used for"
    echo "               a target."
    echo "  -t TARGET    Prepare to build only this target."
    echo "  -r           Regenerate config.mk. This doesn't touch repos in"
    echo "               'build/' or preload in 'bits/'."
    exit 0
}


function get_target_repos() {
    local target=$1
    local info
    for info in `cat targets.json | $JSON $target.repos | $JSON -a -d, url dir submodule-recursive`; do
        local repo_url=$(echo "$info" | cut -d, -f 1)
        local repo_dir=$(echo "$info" | cut -d, -f 2)
        local submodule_recursive=$(echo "$info" | cut -d, -f 3)
        [[ -z "$submodule_recursive" ]] && submodule_recursive=true
        get_repo2 $repo_url $BRANCH "$submodule_recursive" "$repo_dir" "$TRY_BRANCH"
    done
}



#---- mainline

trap 'errexit $? $LINENO' EXIT

# Can be a target name to tell 'configure' to (a) limit prep to just that
# target and (b) pre-load "bits/" with pre-built dependent target bits.
# If empty it means that we are configuring for a full build.
TARGET=
REGENERATE='false'

while getopts "b:B:hurft:" opt; do
    case "$opt" in
        b) BRANCH=$OPTARG ;;
        B) TRY_BRANCH=$OPTARG ;;
        h) print_help ;;
        r)
            REGENERATE='true'
            ;;
        t) TARGET=${OPTARG} ;;
        ?) fatal "unknown option: $opt" ;;
    esac
done
shift $((OPTIND-1))


if [[ "$REGENERATE" == 'true' ]]; then
    gen_config
    exit 0
fi


# Else we are doing a full configure for a fresh build. Start fresh:
mkdir -p bits
touch bits/config.mk
make distclean


if [[ ! -z "$TARGET" ]]; then
    get_target_repos $TARGET
    for targ in `cat targets.json | $JSON $TARGET.deps | $JSON -a`; do
        preload_bits $targ "$BRANCH" "$TRY_BRANCH"
    done
else
    targets=$(node -e 'fs=require("fs"); c=fs.readFileSync("targets.json"); Object.keys(JSON.parse(c)).join("\n")')
    for targ in $targets; do
        get_target_repos $targ
    done
fi

gen_config
