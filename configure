#!/bin/bash
# vi: tabstop=4 expandtab shiftwidth=4
#
# Configure the mountain gorilla (aka SDC) build.
#


if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: '
    set -o xtrace
fi
set -o errexit
set -o pipefail



#---- config, globals

BRANCH="master"
BUILD_PLATFORM='true'

ZONES="mcp_api_admin customers_api booter mcp_api_gateway public-web-client public_api cloud-api billing_api"
PLAT_COMPONENTS="illumos-joyent ur-agent kvm kvm-cmd-14 operator-toolkit sdc-platform"

ROOT=$(pwd)

FORCE_RECONFIG='false'

URL="https://stuff.joyent.us/stuff/builds/nightly/master-latest/"
CREDS="guest:GrojhykMid"
#---- internal support functions

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

function errexit {
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1 at line $2"
}

function config_clean() {
    repo=$1
    # TODO: parse a repo:target mapping and clean targets better
    targ=$(cat repos.json | json $repo | json target)
    parent=$(cat repos.json | json $repo | json parents | json 0)
    gmake clean_$targ
    if [[ -n $parent ]]; then
          config_clean $parent
    fi
}


function get_repo() {
    local_branch=$1
    SRC=$2
    DEST=$3
    # Should be 'true' to request usage of '--recursive' on 'git submodule update ...' call.
    SUBMODULE_RECURSIVE=$4

    echo "# build/$DEST"
    if [[ ! -d build/$DEST ]]; then
        (mkdir -p build; git clone -b $local_branch git@git.joyent.com:${SRC}.git build/${DEST})
    else
        out=$(cd build/$DEST ; git checkout $local_branch ; git pull)
    fi
    if [[ "$SUBMODULE_RECURSIVE" == "true" ]]; then
        (cd build/$DEST; git submodule update --init --recursive)
    else
        (cd build/$DEST; git submodule update --init)
    fi

    if [[ $out != "Already up-to-date." || $FORCE_RECONFIG == 'true' ]]; then
        config_clean $SRC
    fi 
}

function get_github_repo() {
    SRC=$1
    DEST=$2
    GITHUBUSER=$3

    echo "# build/$DEST"
    if [[ ! -d build/$DEST ]]; then
        (mkdir -p build; git clone git://github.com/${GITHUBUSER}/${SRC}.git build/${DEST})
    else
        out=$(cd build/$DEST ; git pull)
    fi
    (cd build/$DEST; git submodule update --init --recursive )

    if [[ $out != "Already up-to-date." ]]; then
        config_clean $SRC
    fi 
}
function get_smartlogin() {
    get_repo $1 smart-login smartlogin true
    if [[ -n $2 ]]; then
        (cd build/smartlogin; git checkout $2)
    fi
}

function get_ca() {
    # RELENG-222, INTRO-543: cannot do recursive git submodule update for CA
    # while it is using the old Connect.
    get_repo $1 cloud-analytics ca false
} 

function get_ufds() {
    get_repo $1 ufds ufds
} 
function get_agents() {
    get_repo $1 agents agents true
}

function get_agentsshar() {
    get_repo $1 agents-installer agents-installer true
}

function get_usbheadnode() {
    get_repo $1 usb-headnode usb-headnode true
}

function get_illumoslive() {
    if [[ `uname -s` == "SunOS" && $BUILD_PLATFORM == 'true' ]]; then
        get_repo $1 illumos-live illumos-live true
        get_github_repo illumos-extra illumos-extra joyent
        for bit in $PLAT_COMPONENTS; do
            get_repo $1 $bit $bit true
        done
        PLATFORM_BRANCH=$BRANCH
        PLATFORM_SHA=$(cd build/illumos-live ; git log --pretty=format:'%h' -1 )
        sed -e "s/BRANCH/$BRANCH/" -e "s:GITCLONESOURCE:$ROOT/build/:" <illumos-configure.tmpl> build/illumos-live/configure.mg
        sed -e "s/BRANCH/$BRANCH/" <illumos-configure-branches.tmpl> build/illumos-live/configure-branches
    else
        BUILD_PLATFORM='false'
        platforms=$(ls bits/platform-*.tgz || /usr/bin/true)
        PLATFORM_TIMESTAMP=$(echo $platforms | sort | tail -n1 | \
            sed -e "s/platform.*-\([0-9TZ]*\)\.tgz/\1/" | \
            xargs -I timestamp basename timestamp)
        if [[ -z $PLATFORM_TIMESTAMP ]]; then
            echo "Error: not building platform file, and no platform file found. Exiting"
            exit 1
        fi
    fi
}

function get_zone_repo() {
    zone=$1
    branch=$2

    get_repo $branch $zone $zone true

    if [[ $zone == "cloud-api" ]]; then
        (cd build/cloud-api &&\
            mkdir -p ssl  && \
            mkdir -p node_modules)
        get_repo $1 node-sdc-clients cloud-api/node_modules/sdc-clients true
    fi
}

function get_zones() {
    # There's got to be a better way to enumerate this stuff
    for zone in $ZONES; do
        get_repo $1 $zone $zone true
    done

    # cloudapi is special, it uses 3 repos
    (cd build/cloud-api &&\
        mkdir -p ssl  && \
        mkdir -p node_modules)
    get_repo $1 node-sdc-clients cloud-api/node_modules/sdc-clients true

    cat <<EOF > build/usb-headnode/build.spec.local
  {
    "agents-shar": "$BRANCH"
  , "adminui-checkout": "origin/$BRANCH"
  , "ca-tarball": "^ca-pkg-$BRANCH-.*.tar.bz2$"
  , "capi-checkout": "origin/$BRANCH"
  , "dhcpd-checkout": "origin/$BRANCH"
  , "mapi-checkout": "origin/$BRANCH"
  , "portal-checkout": "origin/$BRANCH"
  , "cloudapi-checkout": "origin/$BRANCH"
  , "rabbitmq-checkout": "origin/$BRANCH"
}
EOF
}

function gen_config() {
    cat <<EOF >config.mk
TIMESTAMP=$(TZ=UTC date "+%Y%m%dT%H%M%SZ")

SMARTLOGIN_BRANCH=$BRANCH
SMARTLOGIN_SHA=$((cd build/smartlogin 2>&1 > /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

AGENTS_BRANCH=$BRANCH
AGENTS_SHA=$((cd build/agents 2>&1 > /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

CA_BRANCH=$BRANCH
CA_SHA=$((cd build/ca 2>&1 > /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

UFDS_BRANCH=$BRANCH
UFDS_SHA=$((cd build/ufds 2>&1 > /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

AGENTSSHAR_BRANCH=$BRANCH
AGENTSSHAR_SHA=$((cd build/agents-installer 2>&1 > /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

USBHEADNODE_BRANCH=$BRANCH
USBHEADNODE_SHA=$((cd build/usb-headnode 2>&1 > /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

BUILD_PLATFORM=$BUILD_PLATFORM
EOF

    if [[ `uname -s` == "SunOS" && $BUILD_PLATFORM == 'true' ]]; then
        cat <<EOF >>config.mk
PLATFORM_BRANCH=$PLATFORM_BRANCH
PLATFORM_SHA=$PLATFORM_SHA

EOF

        for zone in $ZONES; do
            capzone=$(echo $zone | tr [:lower:] [:upper:] | tr - _)
            cat <<EOF >>config.mk
${capzone}_BRANCH=$BRANCH
${capzone}_SHA=$((cd build/$zone 2>&1 > /dev/null && git log --pretty=format:'%h' -1 ) || echo "")
EOF

        done
    else
        cat <<EOF >>config.mk
PLATFORM_TIMESTAMP=$PLATFORM_TIMESTAMP
EOF
    fi

    echo "'config.mk' created."
}


function print_help() {
    echo "Configure this SDC build. This involves cloning/pulling the "
    echo "component source repositories."
    echo ""
    echo "Usage:"
    echo "  ./configure [ -b BRANCH ] [ -n ] [ -r REPO [-f] ] [ -s TARGET ]"
    echo ""
    echo "Options:"
    echo "  -h           Print this help and exit."
    echo "  -b BRANCH    Branch to checkout. Defaults to 'master'."
    echo "               Note that this is for *all* core repositories."
    echo "  -n           Do not build platform (only applicable on SmartOS)"
    echo "  -r REPO      Reconfigure build. Remove build artifacts, checkout to SHA in config.mk or HEAD"
    echo "  -f           Force reconfig (clean and rebuild)"
    echo "  -s TARGET    Only checkout repos required to build TARGET" 
    exit 0
}

function download_bits() {
  platform=$(curl -k -L -u $CREDS $URL | grep platform | cut -d '>' -f 2 | cut -d '<' -f1)
  agentsshar=$(curl -k -L -u $CREDS $URL/ur-scripts | grep agents | grep \.sh | cut -d '>' -f 2 | cut -d '<' -f1 | cut -d "." -f1)
  ca_pkg=$(curl -k -L -u $CREDS $URL/assets | grep ca-pkg | cut -d '>' -f 2 | cut -d '<' -f1 )

  mkdir -p bits/assets || /bin/true
  mkdir -p bits/ur-scripts || /bin/true

  (cd bits; curl -k -L -u $CREDS -O $URL/$platform)
  (cd bits/assets; curl -k -L -u $CREDS -O $URL/assets/$ca_pkg)
  (cd bits/ur-scripts; curl -k -L -u $CREDS -O $URL/ur-scripts/${agentsshar}.sh; \
      curl -k -L -u $CREDS -O $URL/ur-scripts/${agentsshar}.md5sum; )
  get_usbheadnode $BRANCH
  get_zones $BRANCH
  get_ufds $BRANCH

  timestamp=$(echo $platform | cut -d '-' -f2 | cut -d '.' -f 1)
  echo "TIMESTAMP=$timestamp" > config.mk
  echo "USBHEADNODE_BRANCH=$BRANCH" >> config.mk
  echo "USBHEADNODE_SHA=$((cd build/usb-headnode 2>&1 > /dev/null && git log --pretty=format:'%h' -1 ) || echo "")" >> config.mk
}

#---- mainline

trap 'errexit $? $LINENO' EXIT

while getopts ":b:hunr:fs:o" opt; do
    case $opt in
        b) BRANCH=$OPTARG;;
        h) print_help ;;
        n) BUILD_PLATFORM='false' ;;
        r) RECONFIG='true' ; RECONF_REPO=${OPTARG} ;;
        s) SOLE='true' ; SOLE_REPO=${OPTARG} ;;
        f) FORCE_RECONFIG='true' ;;
        o) ONLINE=1 ;;
        ?) fatal "unknown option: $opt" ;;
    esac
    shift $((OPTIND-1))
done

if [[ $RECONFIG == 'true' && -z $RECONF_REPO || $SOLE == 'true' && -z $SOLE_REPO ]]; then
    print_help
    exit 1
fi

# The configure process wants to run "clean_*" targets in the Makefile.
# The Makefile needs a config.mk to exist. An empty one will suffice for
# the clean targets.
touch config.mk


if [[ $ONLINE == 1 ]]; then
    download_bits
    exit 0
fi

if [[ $SOLE != 'true' ]]; then
    # TODO: not sure about allow no arg to '-r'. Doesn't that screw up './configure -r -n'?
    if [[ -n $RECONF_REPO ]]; then
        if [[ $(echo $ZONES | grep $RECONF_REPO) ]]; then
            get_zone_repo $RECONF_REPO $BRANCH
        else
            targ=$(cat repos.json | json $RECONF_REPO | json target)
            if [[ -n $targ ]]; then
                RECONF_REPO=$targ
            fi
            get_$RECONF_REPO $BRANCH
        fi
    else
        get_smartlogin $BRANCH
        get_ca $BRANCH
        get_ufds $BRANCH
        get_agents $BRANCH
        get_agentsshar $BRANCH
        get_usbheadnode $BRANCH
        get_illumoslive $BRANCH
        get_zones $BRANCH
    fi
else
    if [[ $SOLE_REPO == 'usb-headnode' ]]; then
        get_smartlogin $BRANCH
        get_ca $BRANCH
        get_ufds $BRANCH
        get_agents $BRANCH
        get_agentsshar $BRANCH
        get_usbheadnode $BRANCH
        get_illumoslive $BRANCH
        get_zones $BRANCH
    elif [[ $SOLE_REPO == 'agents-installer' ]]; then
        get_agentsshar $BRANCH
        get_agents $BRANCH
        get_smartlogin $BRANCH
        get_ca $BRANCH
        get_ufds $BRANCH
    elif [[ $SOLE_REPO == 'illumos-live' ]]; then
        get_illumoslive $BRANCH
    else
        get_repo $BRANCH $SOLE_REPO $SOLE_REPO true
    fi
fi

gen_config
