#!/bin/bash
# vi: tabstop=4 expandtab shiftwidth=4
#
# Configure the mountain gorilla (aka SDC) build.
#


if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: '
    set -o xtrace
fi
set -o errexit
set -o pipefail



#---- config, globals

BRANCH="master"

ZONES="mcp_api_admin booter mcp_api_gateway public-web-client cloud-api billing_api"

ROOT=$(pwd)
JSON=$ROOT/tools/json

FORCE_RECONFIG='false'




#---- internal support functions

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

function errexit {
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1 at line $2"
}

#XXX unused currently
function config_clean() {
    repo=$1
    # TODO: parse a repo:target mapping and clean targets better
    targ=$(cat repos.json | json $repo | json target)
    parent=$(cat repos.json | json $repo | json parents | json 0)
    gmake clean_$targ
    if [[ -n $parent ]]; then
          config_clean $parent
    fi
}

# Preload bits/ with the latest built and uploaded bits for
# the given target and branch.
# Usage:
#   preload_bits TARGET BRANCH
#
function preload_bits() {
    local target=$1
    local branch=$2

    echo "# preload bits/$target from stuff.joyent.us/builds/$target/$branch-latest/$target"
    local ssh="ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    mkdir -p bits/$target
    rsync -e "$ssh" -av \
        stuff@stuff.joyent.us:builds/$target/$branch-latest/$target/ \
        bits/$target/
}

# Get the requested repo.
# Usage:
#   get_repo2 REPO-URL BRANCH SUBMODULE-RECURSIVE [NAME]
#
# If "SUBMODULE-RECURSIVE" is "true", then "--recursive" is used on
# on the "git submodule update ..." call.
#
# If "NAME" is given, that subdir under "build/" will be used as the
# clone dir. Else it is inferred from the REPO-URL.
#
function get_repo2() {
    local repo_url=$1
    local branch=$2
    local submodule_recursive=$3
    local repo_dir=$4

    if [[ -z "$repo_dir" ]]; then
        repo_dir=${repo_url##*/}    # strip to last '/'
        repo_dir=${repo_dir##*:}    # strip to last ':'
        repo_dir=${repo_dir%*.git}    # strip '.git' at tail
    fi

    echo "# get '$repo_url' to 'build/$repo_dir'"
    local out
    if [[ ! -d build/$repo_dir ]]; then
        mkdir -p build/$repo_dir
        git clone $repo_url build/$repo_dir
        # Note: Use separate `git checkout $branch` instead of `-b $branch`
        # with git clone command because the latter doesn't return non-zero
        # if the branch doesn't exist.
        git checkout $branch
    else
        out=$(cd build/$repo_dir ; git checkout $branch ; git pull)
    fi
    if [[ "$submodule_recursive" == "true" ]]; then
        (cd build/$repo_dir; git submodule update --init --recursive)
    else
        (cd build/$repo_dir; git submodule update --init)
    fi
}


function gen_config() {
    mkdir -p bits
    cat <<EOF >bits/config.mk
TIMESTAMP=$(TZ=UTC date "+%Y%m%dT%H%M%SZ")
BRANCH=$BRANCH

SMARTLOGIN_BRANCH=$BRANCH
SMARTLOGIN_SHA=$((cd build/smart-login 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

AMON_BRANCH=$BRANCH
AMON_SHA=$((cd build/amon 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

AGENTS_BRANCH=$BRANCH
AGENTS_SHA=$((cd build/agents 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

CA_BRANCH=$BRANCH
CA_SHA=$((cd build/cloud-analytics 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

UFDS_BRANCH=$BRANCH
UFDS_SHA=$((cd build/ufds 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

AGENTSSHAR_BRANCH=$BRANCH
AGENTSSHAR_SHA=$((cd build/agents-installer 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

USBHEADNODE_BRANCH=$BRANCH
USBHEADNODE_SHA=$((cd build/usb-headnode 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

PLATFORM_BRANCH=$BRANCH
PLATFORM_SHA=$((cd build/illumos-live 1>&2 2> /dev/null && git log --pretty=format:'%h' -1 ) || echo "")

EOF

    local repo_name
    for repo_name in `ls -1 build`; do
        upper_repo_name=$(echo $repo_name | tr [:lower:] [:upper:] | tr - _)
        cat <<EOF >>bits/config.mk
${upper_repo_name}_BRANCH=$(CDPATH= cd build/$repo_name && git symbolic-ref HEAD | awk -F/ '{print $3}')
${upper_repo_name}_SHA=$(CDPATH= cd build/$repo_name && git log --pretty=format:'%h' -1)
EOF
    done

    echo "'bits/config.mk' created."
}


function print_help() {
    echo "Configure this SDC build. This involves cloning/pulling the "
    echo "component source repositories."
    echo ""
    echo "Usage:"
    echo "  ./configure [ -b BRANCH ] [ -r REPO [-f] ] [ -t TARGET ]"
    echo ""
    echo "Options:"
    echo "  -h           Print this help and exit."
    echo "  -b BRANCH    Branch to checkout. Defaults to 'master'."
    echo "               Note that this is for *all* core repositories."
    echo "  -r REPO      Reconfigure build. Remove build artifacts, checkout to SHA in bits/config.mk or HEAD"
    echo "  -f           Force reconfig (clean and rebuild)"
    echo "  -t TARGET    Prepare to build only this target."
    exit 0
}



#---- mainline

trap 'errexit $? $LINENO' EXIT

# Can be a target name to tell 'configure' to (a) limit prep to just that
# target and (b) pre-load "bits/" with pre-built dependent target bits.
# If empty it means that we are configuring for a full build.
TARGET=

while getopts ":b:hur:ft:" opt; do
    case $opt in
        b) BRANCH=$OPTARG;;
        h) print_help ;;
        r) RECONFIG='true' ; RECONF_REPO=${OPTARG} ;;
        f) FORCE_RECONFIG='true' ;;
        t) TARGET=${OPTARG} ;;
        ?) fatal "unknown option: $opt" ;;
    esac
    shift $((OPTIND-1))
done

if [[ $RECONFIG == 'true' && -z $RECONF_REPO ]]; then
    print_help
    exit 1
fi


# The configure process wants to run "clean_*" targets in the Makefile.
# The Makefile needs a bits/config.mk to exist. An empty one will suffice for
# the clean targets.
mkdir -p bits
touch bits/config.mk


if [[ "$RECONFIG" == 'true' ]]; then
    #XXX TODO: reconfigure support:
    # - if a target is given ("./configure -r ca"), then just "clean_ca" (and clean_$dep for deps)
    #   - TODO: consider also blowing away all the associated build/$repo dirs for clean pull
    XXX
else
    make distclean
fi

if [[ ! -z "$TARGET" ]]; then
    # "targets.json" is a mapping of Makefile target to info about that target:
    # - repos: A list of repos to clone to the "build/" directory for building it.
    #   Each repo entry is an object like this:
    #       {"url": "git@git.joyent.com:cloud-analytics.git",
    #        "submodule-recursive": false,      # optional
    #        "dir": "good-ole-ca"}              # optional
    # - deps: A list of dependent targets.

    for info in `cat targets.json | $JSON $TARGET.repos | $JSON -a -d, url dir submodule-recursive`; do
        repo_url=$(echo "$info" | cut -d, -f 1)
        repo_dir=$(echo "$info" | cut -d, -f 2)
        submodule_recursive=$(echo "$info" | cut -d, -f 3)
        [[ -z "$submodule_recursive" ]] && submodule_recursive=true
        get_repo2 $repo_url $BRANCH "$submodule_recursive" "$repo_dir"
    done

    for targ in `cat targets.json | $JSON $TARGET.deps | $JSON -a`; do
        preload_bits $targ $BRANCH
    done
else
    # TODO: not sure about allow no arg to '-r'. Doesn't that screw up './configure -r -n'?
    if [[ -n $RECONF_REPO ]]; then
        XXX
    else
        #XXX: TODO: remove this touch requirement by switching to get_repo2
        mkdir -p bits
        touch bits/config.mk

        get_repo2 git@git.joyent.com:smart-login.git $BRANCH true
        get_repo2 git@git.joyent.com:amon.git $BRANCH true
        get_repo2 git@git.joyent.com:cloud-analytics.git $BRANCH false
        get_repo2 git@git.joyent.com:ufds.git $BRANCH true
        get_repo2 git@git.joyent.com:agents.git $BRANCH true
        get_repo2 git@git.joyent.com:agents-installer.git $BRANCH true
        get_repo2 git@git.joyent.com:usb-headnode.git $BRANCH true
        XXX # illumos-live et al
        XXX # usb-headnode zones for ZONES_DIR
    fi
fi

gen_config
