#!/bin/bash
#
# Configure the mountain gorilla (aka SDC) build.
#

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: '
    set -o xtrace
fi
set -o errexit
set -o pipefail

#---- config, globals

BRANCH="master"
BUILD_PLATFORM='true'

ZONES="mcp_api_admin customers_api booter mcp_api_gateway public-web-client public_api cloud-api billing_api"
PLAT_COMPONENTS="illumos-joyent ur-agent kvm kvm-cmd-14 operator-toolkit"

ROOT=$(pwd)
#---- internal support functions

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

function errexit {
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1 at line $2"
}

function config_clean() {
  repo=$1
	# TODO: parse a repo:target mapping and clean targets better
	targ=$(cat repos.json | json $repo | json target)
  parent=$(cat repos.json | json $repo | json parents | json 0)
	gmake clean_$targ
	if [[ -n $parent ]]; then
		config_clean $parent
	fi
}

function get_repo() {
    local_branch=$1
    SRC=$2
    DEST=$3

    echo "# build/$DEST"
    if [[ ! -d build/$DEST ]]; then
        (mkdir -p build; git clone -b $local_branch git@git.joyent.com:${SRC}.git build/${DEST})
    else
        out=$(cd build/$DEST ; git checkout $local_branch ; git pull)
    fi
    (cd build/$DEST; git submodule update --init --recursive )

    if [[ $out != "Already up-to-date." ]]; then
		 	config_clean $SRC
    fi 
}
function get_github_repo() {
    SRC=$1
    DEST=$2
    GITHUBUSER=$3

    echo "# build/$DEST"
    if [[ ! -d build/$DEST ]]; then
        (mkdir -p build; git clone git://github.com/${GITHUBUSER}/${SRC}.git build/${DEST})
    else
        out=$(cd build/$DEST ; git pull)
    fi
    (cd build/$DEST; git submodule update --init --recursive )

    if [[ $out != "Already up-to-date." ]]; then
		 	config_clean $SRC
    fi 
}
function get_smartlogin() {
    get_repo $1 smart-login smartlogin
    if [[ -n $2 ]]; then
        (cd build/smartlogin; git checkout $2)
    fi
}

function get_ca() {
    get_repo $1 cloud-analytics ca
} 

function get_agents() {
    get_repo $1 agents agents
}

function get_agentsshar() {
    get_repo $1 agents-installer agents-installer
}

function get_usbheadnode() {
    get_repo $1 usb-headnode usb-headnode
}

function get_illumoslive() {
    if [[ `uname -s` == "SunOS" && $BUILD_PLATFORM == 'true' ]]; then
        get_repo $1 illumos-live illumos-live
        get_github_repo illumos-extra illumos-extra joyent
        for bit in $PLAT_COMPONENTS; do
            get_repo $1 $bit $bit
        done
        PLATFORM_BRANCH=$BRANCH
        PLATFORM_SHA=$(cd build/illumos-live ; git log --pretty=format:'%h' -1 )
        sed -e "s/BRANCH/$BRANCH/" -e "s:GITCLONESOURCE:$ROOT/build/:" <illumos-configure.tmpl> build/illumos-live/configure.mg
        sed -e "s/BRANCH/$BRANCH/" <illumos-configure-branches.tmpl> build/illumos-live/configure-branches
    else
        BUILD_PLATFORM='false'
        platforms=$(ls bits/platform-*.tgz || /usr/bin/true)
        PLATFORM_TIMESTAMP=$(echo $platforms | sort | tail -n1 | \
            sed -e "s/platform.*-\([0-9TZ]*\)\.tgz/\1/" | \
            xargs -I timestamp basename timestamp)
        if [[ -z $PLATFORM_TIMESTAMP ]]; then
            echo "Error: not building platform file, and no platform file found. Exiting"
            exit 1
        fi
    fi
}

function get_zone_repo() {
  $zone = $1
	$branch = $2

	get_repo $branch $zone $zone

	if [[ $zone == "cloud-api" ]]; then
    ( cd build/cloud-api &&\
		  mkdir -p ssl  && \
			mkdir -p node_modules)
			get_repo $1 node-sdc-clients cloud-api/node_modules/sdc-clients 
  fi

}

function get_zones() {

  # There's got to be a better way to enumerate this stuff
  for zone in $ZONES; do
    get_repo $1 $zone $zone
  done

  # cloudapi is special, it uses 3 repos
  ( cd build/cloud-api &&\
    mkdir -p ssl  && \
    mkdir -p node_modules)
  get_repo $1 node-sdc-clients cloud-api/node_modules/sdc-clients

cat <<EOF > build/usb-headnode/build.spec.local
  {
    "agents-shar": "$BRANCH"
  , "adminui-checkout": "origin/$BRANCH"
  , "ca-tarball": "^ca-pkg-$BRANCH-.*.tar.bz2$"
  , "capi-checkout": "origin/$BRANCH"
  , "dhcpd-checkout": "origin/$BRANCH"
  , "mapi-checkout": "origin/$BRANCH"
  , "portal-checkout": "origin/$BRANCH"
  , "cloudapi-checkout": "origin/$BRANCH"
  , "rabbitmq-checkout": "origin/$BRANCH"
}
EOF
}

function gen_config() {
    cat <<EOF >config.mk
TIMESTAMP=$(TZ=UTC date "+%Y%m%dT%H%M%SZ")

SMARTLOGIN_BRANCH=$BRANCH
SMARTLOGIN_SHA=$(cd build/smartlogin ; git log --pretty=format:'%h' -1 )

AGENTS_BRANCH=$BRANCH
AGENTS_SHA=$(cd build/agents ; git log --pretty=format:'%h' -1 )

CA_BRANCH=$BRANCH
CA_SHA=$(cd build/ca ; git log --pretty=format:'%h' -1 )

AGENTSSHAR_BRANCH=$BRANCH
AGENTSSHAR_SHA=$(cd build/agents-installer ; git log --pretty=format:'%h' -1 )

USBHEADNODE_BRANCH=$BRANCH
USBHEADNODE_SHA=$(cd build/usb-headnode ; git log --pretty=format:'%h' -1 )

BUILD_PLATFORM=$BUILD_PLATFORM
EOF

if [[ `uname -s` == "SunOS" && $BUILD_PLATFORM == 'true' ]]; then
    cat <<EOF >>config.mk
PLATFORM_BRANCH=$PLATFORM_BRANCH
PLATFORM_SHA=$PLATFORM_SHA

EOF

for zone in $ZONES; do
    capzone=$(echo $zone | tr [:lower:] [:upper:] | tr - _)
    cat <<EOF >>config.mk
${capzone}_BRANCH=$BRANCH
${capzone}_SHA=$(cd build/$zone ; git log --pretty=format:'%h' -1 )
EOF

done
else
    cat <<EOF >>config.mk
PLATFORM_TIMESTAMP=$PLATFORM_TIMESTAMP
EOF
fi
    echo "'config.mk' created."
}


function print_help() {
    echo "Configure this SDC build. This involves cloning/pulling the "
    echo "component source repositories."
    echo ""
    echo "Usage:"
    echo "  ./configure [ -b BRANCH ] [ -n ] [ -r TARGET ]"
    echo ""
    echo "Options:"
    echo "  -h           Print this help and exit."
    echo "  -b BRANCH    Branch to checkout. Defaults to 'master'."
    echo "               Note that this is for *all* core repositories."
    echo "  -n           Do not build platform (only applicable on SmartOS)"
    echo "  -r TARGET    Reconfigure build. Remove build artifacts, checkout to SHA in config.mk or HEAD"
    exit 0
}



#---- mainline

trap 'errexit $? $LINENO' EXIT

while getopts ":b:hunr:" opt; do
    case $opt in
        b) BRANCH=$OPTARG;;
        h) print_help ;;
        n) BUILD_PLATFORM='false' ;;
        r) RECONFIG='true' ; RECONF_REPO=${OPTARG} ;;
        ?) fatal "unknown option: $opt" ;;
    esac
    shift $((OPTIND-1))
done

# The configure process wants to run "clean_*" targets in the Makefile.
# The Makefile needs a config.mk to exist. An empty one will suffice for
# the clean targets.
touch config.mk

# TODO: not sure about allow no arg to '-r'. Doesn't that screw up './configure -r -n'?
if [[ -n $RECONF_REPO ]]; then
  if [[ $(echo $ZONES | grep $RECONF_REPO) ]]; then
    get_zone_repo $RECONF_REPO $BRANCH
  else
    get_$RECONF_REPO $BRANCH
  fi
else
  get_smartlogin $BRANCH
  get_ca $BRANCH
  get_agents $BRANCH
  get_agentsshar $BRANCH
  get_usbheadnode $BRANCH
  get_illumoslive $BRANCH
  get_zones $BRANCH
fi

gen_config
